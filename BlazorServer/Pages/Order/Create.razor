@page "/Order/Create"

@inject IFoodData foodData
@inject IOrderData orderData

<h2>Create Order</h2>


<EditForm Model="@order" OnValidSubmit="CreateOrder">
    <DataAnnotationsValidator />
    <ValidationSummary Model="@order" />

    <div class="form-group">
        <label>Item to Order</label>
        <select @onchange="FoodItemchange" class="form-control">
            <option value="">Select a meal...</option>
            @foreach (var food in foodItems)
            {
                <option value="@food.Id">@food.Title</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label>Quatity</label>
        <InputNumber @bind-Value="order.Quantity" class="form-control" />
        <ValidationMessage For="@(()=> order.Quantity)" class="text-danger" />
    </div>

    <div class="form-group">
        <label>Name for the Order</label>
        <InputText @bind-Value="order.OrderName" class="form-control" />
        <ValidationMessage For="@(()=> order.OrderName)" class="text-danger" />
    </div>

    <div class="form-group">
        <input type="submit" value="Order Food" class="btn btn-primary" />
    </div>
</EditForm>

@code{
    private OrderModel order = new();
    private List<FoodModel> foodItems = new();


    protected override async Task OnInitializedAsync()
    {
        foodItems = await foodData.GetFood();

    }

    private void FoodItemchange(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value.ToString()) == false)
        {
            order.FoodId = int.Parse(e.Value.ToString());
        }
        else
        {
            order.FoodId = 0;
        }
    }

    private async Task CreateOrder()
    {
        order.Total = order.Quantity * foodItems.Where(x => x.Id == order.FoodId).First().Price;

        int id = await orderData.CreareOrder(order);

        order = new OrderModel();
    }
}